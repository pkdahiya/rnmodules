name: CI and CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'    

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
           node-version: '22.9.0'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: npm install

    #   - name: Run Prettier
    #     run: npm run format

    #   - name: Run ESLint
    #     run: npm run lint:fix

      - name: Run Unit Tests
        run: npm run test

      # - name: Run Detox tests 
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 3
      #     arch: x86_64
      #     avd-name: Pixel_6a_API_34
      #     force-avd-creation: false
      #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
      #     disable-animations: false
      #     script: npm run detox:android:test:ci

   #  - name: Build Detox and Run E2E Tests
      #   run: |
      #     npm run detox:genymotion_cloud
      #     npm run detox:genymotion_cloud
      
      # Prefer to run localy e2e beacause it requires high computation and cost much on cloud services
      # If you have money go with Genymotion 0.05$ per minute😁

      
     
  deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
           node-version: '22.9.0'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
    #   #1     
    #   - name: Decode Keystore
    #     env:
    #       ENCODED_STRING: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
    #       SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}

    #     run: |
    #       echo $ENCODED_STRING > keystore-b64.txt
    #       base64 -d keystore-b64.txt > $SIGNING_KEY_STORE_PATH
    #   #2
      - name: Build Release apk
        env:
          releaseDir: app/build/outputs
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: cd android && ./gradlew assembleRelease

      - name: Build Release bundle
        env:
          releaseDir: app/build/outputs
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: cd android && ./gradlew bundleRelease
      #3
      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            app/build/outputs/apk/release/
            app/build/outputs/bundle/release/
      #4      
      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          repository: my_gh_org/my_gh_repo
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.GH_TOKEN }}
          generate_release_notes: true
          prerelease: true
          files: |
            app/build/outputs/apk/release/app-release.apk
            app/build/outputs/bundle/release/app-release.aab

      - name: Find APK/AAB
        id: find_artifact
        run: |
          APK_PATH=$(find . -path '*/release/*.apk' -print -quit)
          AAB_PATH=$(find . -path '*/release/*.aab' -print -quit)
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "aab_path=${AAB_PATH}" >> $GITHUB_OUTPUT

      - name: Setup Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

    #   - name: Configure Fastlane Firebase
    #     run: |
    #       echo "firebase_cli_token = '${{ secrets.FIREBASE_TOKEN }}'" > fastlane/Appfile
    #       echo "app_id = '${{ secrets.FIREBASE_APP_ID }}'" >> fastlane/Appfile
    #       echo "groups = '${{ 'testergroup' }}'" >> fastlane/Appfile

      - name: Configure Fastlane
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          PLAY_STORE_JSON_KEY: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        run: |
          mkdir -p fastlane
          echo "json_key_file_data = '${PLAY_STORE_JSON_KEY}'" > fastlane/Appfile
          echo "package_name = 'com.rnmodules'" >> fastlane/Appfile
          echo "firebase_app_id = '${FIREBASE_APP_ID}'" >> fastlane/Appfile

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
            
      - name: Install Node.js dependencies
        run: npm install

      - name: Install Fastlane
        run: |
          cd android
          bundle install
          bundle exec fastlane --version
          bundle exec fastlane add_plugin firebase_app_distribution
    #       sudo chmod -R a+r /Library/Ruby/Gems/2.6.0/gems/fastlane-plugin-firebase_app_distribution-0.1.4
    #       bundle exec fastlane add_plugin firebase_app_distribution

        #   sudo gem install fastlane -NV
        #   fastlane add_plugin firebase_app_distribution
        #   sudo chmod -R a+r /Library/Ruby/Gems/2.6.0/gems/fastlane-plugin-firebase_app_distribution-0.1.4
        #   fastlane add_plugin firebase_app_distribution

        #   sudo gem install fastlane -NV 

      - name: Run Fastlane
        env:
          FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}
          BUILD_ARTIFACT: ${{ steps.find_artifact.outputs.apk_path || steps.find_artifact.outputs.aab_path }}
        run: |
          cd android && bundle exec fastlane distribute_to_firebase

    #   - name: Deploy to firebase
    #     run: |
    #       cd android
    #       bundle exec fastlane distribute_to_firebase
    # cd android && bundle exec fastlane distribute_to_firebase

